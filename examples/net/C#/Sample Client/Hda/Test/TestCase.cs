//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by xsd, Version=1.1.4322.573.
// 
namespace OpcClientSdk.Hda.Test {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class _DataSet : DataSet {
        
        private TestCasesDataTable tableTestCases;
        
        private ItemValuesDataTable tableItemValues;
        
        private DataRelation relationTestCase_ItemValue;
        
        public _DataSet() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected _DataSet(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["TestCase"] != null)) {
                    this.Tables.Add(new TestCasesDataTable(ds.Tables["TestCase"]));
                }
                if ((ds.Tables["TsCHdaItemValue"] != null)) {
                    this.Tables.Add(new ItemValuesDataTable(ds.Tables["TsCHdaItemValue"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TestCasesDataTable TestCases {
            get {
                return this.tableTestCases;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ItemValuesDataTable ItemValues {
            get {
                return this.tableItemValues;
            }
        }
        
        public override DataSet Clone() {
            _DataSet cln = ((_DataSet)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["TestCase"] != null)) {
                this.Tables.Add(new TestCasesDataTable(ds.Tables["TestCase"]));
            }
            if ((ds.Tables["TsCHdaItemValue"] != null)) {
                this.Tables.Add(new ItemValuesDataTable(ds.Tables["TsCHdaItemValue"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableTestCases = ((TestCasesDataTable)(this.Tables["TestCase"]));
            if ((this.tableTestCases != null)) {
                this.tableTestCases.InitVars();
            }
            this.tableItemValues = ((ItemValuesDataTable)(this.Tables["TsCHdaItemValue"]));
            if ((this.tableItemValues != null)) {
                this.tableItemValues.InitVars();
            }
            this.relationTestCase_ItemValue = this.Relations["TestCase_ItemValue"];
        }
        
        private void InitClass() {
            this.DataSetName = "_DataSet";
            this.Prefix = "";
            this.Namespace = "http://opcfoundation.org/Hda/1.2/";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableTestCases = new TestCasesDataTable();
            this.Tables.Add(this.tableTestCases);
            this.tableItemValues = new ItemValuesDataTable();
            this.Tables.Add(this.tableItemValues);
            ForeignKeyConstraint fkc;
            fkc = new ForeignKeyConstraint("TestCase_ItemValue", new DataColumn[] {
                        this.tableTestCases.TestCase_IdColumn}, new DataColumn[] {
                        this.tableItemValues.TestCase_IdColumn});
            this.tableItemValues.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.relationTestCase_ItemValue = new DataRelation("TestCase_ItemValue", new DataColumn[] {
                        this.tableTestCases.TestCase_IdColumn}, new DataColumn[] {
                        this.tableItemValues.TestCase_IdColumn}, false);
            this.relationTestCase_ItemValue.Nested = true;
            this.Relations.Add(this.relationTestCase_ItemValue);
        }
        
        private bool ShouldSerializeTestCases() {
            return false;
        }
        
        private bool ShouldSerializeItemValues() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void TestCaseChangeEventHandler(object sender, TestCaseChangeEvent e);
        
        public delegate void ItemValueChangeEventHandler(object sender, ItemValueChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TestCasesDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnName;
            
            private DataColumn columnAggregateID;
            
            private DataColumn columnStartTime;
            
            private DataColumn columnEndTime;
            
            private DataColumn columnMaxValues;
            
            private DataColumn columnIncludeBounds;
            
            private DataColumn columnResampleInterval;
            
            private DataColumn columnResultID;
            
            private DataColumn columnTestCase_Id;
            
            internal TestCasesDataTable() : 
                    base("TestCase") {
                this.InitClass();
            }
            
            internal TestCasesDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            internal DataColumn AggregateIDColumn {
                get {
                    return this.columnAggregateID;
                }
            }
            
            internal DataColumn StartTimeColumn {
                get {
                    return this.columnStartTime;
                }
            }
            
            internal DataColumn EndTimeColumn {
                get {
                    return this.columnEndTime;
                }
            }
            
            internal DataColumn MaxValuesColumn {
                get {
                    return this.columnMaxValues;
                }
            }
            
            internal DataColumn IncludeBoundsColumn {
                get {
                    return this.columnIncludeBounds;
                }
            }
            
            internal DataColumn ResampleIntervalColumn {
                get {
                    return this.columnResampleInterval;
                }
            }
            
            internal DataColumn ResultIDColumn {
                get {
                    return this.columnResultID;
                }
            }
            
            internal DataColumn TestCase_IdColumn {
                get {
                    return this.columnTestCase_Id;
                }
            }
            
            public TestCase this[int index] {
                get {
                    return ((TestCase)(this.Rows[index]));
                }
            }
            
            public event TestCaseChangeEventHandler TestCaseChanged;
            
            public event TestCaseChangeEventHandler TestCaseChanging;
            
            public event TestCaseChangeEventHandler TestCaseDeleted;
            
            public event TestCaseChangeEventHandler TestCaseDeleting;
            
            public void AddTestCase(TestCase row) {
                this.Rows.Add(row);
            }
            
            public TestCase AddTestCase(string Name, int AggregateID, System.Decimal StartTime, System.Decimal EndTime, int MaxValues, bool IncludeBounds, System.Decimal ResampleInterval, string ResultID) {
                TestCase rowTestCase = ((TestCase)(this.NewRow()));
                rowTestCase.ItemArray = new object[] {
                        Name,
                        AggregateID,
                        StartTime,
                        EndTime,
                        MaxValues,
                        IncludeBounds,
                        ResampleInterval,
                        ResultID,
                        null};
                this.Rows.Add(rowTestCase);
                return rowTestCase;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                TestCasesDataTable cln = ((TestCasesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new TestCasesDataTable();
            }
            
            internal void InitVars() {
                this.columnName = this.Columns["Name"];
                this.columnAggregateID = this.Columns["AggregateID"];
                this.columnStartTime = this.Columns["StartTime"];
                this.columnEndTime = this.Columns["EndTime"];
                this.columnMaxValues = this.Columns["MaxValues"];
                this.columnIncludeBounds = this.Columns["IncludeBounds"];
                this.columnResampleInterval = this.Columns["ResampleInterval"];
                this.columnResultID = this.Columns["ResultID"];
                this.columnTestCase_Id = this.Columns["TestCase_Id"];
            }
            
            private void InitClass() {
                this.columnName = new DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnName);
                this.columnAggregateID = new DataColumn("AggregateID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAggregateID);
                this.columnStartTime = new DataColumn("StartTime", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStartTime);
                this.columnEndTime = new DataColumn("EndTime", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnEndTime);
                this.columnMaxValues = new DataColumn("MaxValues", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMaxValues);
                this.columnIncludeBounds = new DataColumn("IncludeBounds", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIncludeBounds);
                this.columnResampleInterval = new DataColumn("ResampleInterval", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnResampleInterval);
                this.columnResultID = new DataColumn("ResultID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnResultID);
                this.columnTestCase_Id = new DataColumn("TestCase_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnTestCase_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnTestCase_Id}, true));
                this.columnTestCase_Id.AutoIncrement = true;
                this.columnTestCase_Id.AllowDBNull = false;
                this.columnTestCase_Id.Unique = true;
            }
            
            public TestCase NewTestCase() {
                return ((TestCase)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new TestCase(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(TestCase);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TestCaseChanged != null)) {
                    this.TestCaseChanged(this, new TestCaseChangeEvent(((TestCase)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TestCaseChanging != null)) {
                    this.TestCaseChanging(this, new TestCaseChangeEvent(((TestCase)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TestCaseDeleted != null)) {
                    this.TestCaseDeleted(this, new TestCaseChangeEvent(((TestCase)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TestCaseDeleting != null)) {
                    this.TestCaseDeleting(this, new TestCaseChangeEvent(((TestCase)(e.Row)), e.Action));
                }
            }
            
            public void RemoveTestCase(TestCase row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TestCase : DataRow {
            
            private TestCasesDataTable tableTestCases;
            
            internal TestCase(DataRowBuilder rb) : 
                    base(rb) {
                this.tableTestCases = ((TestCasesDataTable)(this.Table));
            }
            
            public string Name {
                get {
                    if (this.IsNameNull()) {
                        return null;
                    }
                    else {
                        return ((string)(this[this.tableTestCases.NameColumn]));
                    }
                }
                set {
                    this[this.tableTestCases.NameColumn] = value;
                }
            }
            
            public int AggregateID {
                get {
                    if (this.IsAggregateIDNull()) {
                        return 0;
                    }
                    else {
                        return ((int)(this[this.tableTestCases.AggregateIDColumn]));
                    }
                }
                set {
                    this[this.tableTestCases.AggregateIDColumn] = value;
                }
            }
            
            public System.Decimal StartTime {
                get {
                    if (this.IsStartTimeNull()) {
                        return 0m;
                    }
                    else {
                        return ((System.Decimal)(this[this.tableTestCases.StartTimeColumn]));
                    }
                }
                set {
                    this[this.tableTestCases.StartTimeColumn] = value;
                }
            }
            
            public System.Decimal EndTime {
                get {
                    if (this.IsEndTimeNull()) {
                        return 0m;
                    }
                    else {
                        return ((System.Decimal)(this[this.tableTestCases.EndTimeColumn]));
                    }
                }
                set {
                    this[this.tableTestCases.EndTimeColumn] = value;
                }
            }
            
            public int MaxValues {
                get {
                    if (this.IsMaxValuesNull()) {
                        return 0;
                    }
                    else {
                        return ((int)(this[this.tableTestCases.MaxValuesColumn]));
                    }
                }
                set {
                    this[this.tableTestCases.MaxValuesColumn] = value;
                }
            }
            
            public bool IncludeBounds {
                get {
                    if (this.IsIncludeBoundsNull()) {
                        return false;
                    }
                    else {
                        return ((bool)(this[this.tableTestCases.IncludeBoundsColumn]));
                    }
                }
                set {
                    this[this.tableTestCases.IncludeBoundsColumn] = value;
                }
            }
            
            public System.Decimal ResampleInterval {
                get {
                    if (this.IsResampleIntervalNull()) {
                        return 0m;
                    }
                    else {
                        return ((System.Decimal)(this[this.tableTestCases.ResampleIntervalColumn]));
                    }
                }
                set {
                    this[this.tableTestCases.ResampleIntervalColumn] = value;
                }
            }
            
            public string ResultID {
                get {
                    if (this.IsResultIDNull()) {
                        return "S_OK";
                    }
                    else {
                        return ((string)(this[this.tableTestCases.ResultIDColumn]));
                    }
                }
                set {
                    this[this.tableTestCases.ResultIDColumn] = value;
                }
            }
            
            public bool IsNameNull() {
                return this.IsNull(this.tableTestCases.NameColumn);
            }
            
            public void SetNameNull() {
                this[this.tableTestCases.NameColumn] = System.Convert.DBNull;
            }
            
            public bool IsAggregateIDNull() {
                return this.IsNull(this.tableTestCases.AggregateIDColumn);
            }
            
            public void SetAggregateIDNull() {
                this[this.tableTestCases.AggregateIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsStartTimeNull() {
                return this.IsNull(this.tableTestCases.StartTimeColumn);
            }
            
            public void SetStartTimeNull() {
                this[this.tableTestCases.StartTimeColumn] = System.Convert.DBNull;
            }
            
            public bool IsEndTimeNull() {
                return this.IsNull(this.tableTestCases.EndTimeColumn);
            }
            
            public void SetEndTimeNull() {
                this[this.tableTestCases.EndTimeColumn] = System.Convert.DBNull;
            }
            
            public bool IsMaxValuesNull() {
                return this.IsNull(this.tableTestCases.MaxValuesColumn);
            }
            
            public void SetMaxValuesNull() {
                this[this.tableTestCases.MaxValuesColumn] = System.Convert.DBNull;
            }
            
            public bool IsIncludeBoundsNull() {
                return this.IsNull(this.tableTestCases.IncludeBoundsColumn);
            }
            
            public void SetIncludeBoundsNull() {
                this[this.tableTestCases.IncludeBoundsColumn] = System.Convert.DBNull;
            }
            
            public bool IsResampleIntervalNull() {
                return this.IsNull(this.tableTestCases.ResampleIntervalColumn);
            }
            
            public void SetResampleIntervalNull() {
                this[this.tableTestCases.ResampleIntervalColumn] = System.Convert.DBNull;
            }
            
            public bool IsResultIDNull() {
                return this.IsNull(this.tableTestCases.ResultIDColumn);
            }
            
            public void SetResultIDNull() {
                this[this.tableTestCases.ResultIDColumn] = System.Convert.DBNull;
            }
            
            public TsCHdaItemValue[] GetItemValues() {
                return ((TsCHdaItemValue[])(this.GetChildRows(this.Table.ChildRelations["TestCase_ItemValue"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TestCaseChangeEvent : EventArgs {
            
            private TestCase eventRow;
            
            private DataRowAction eventAction;
            
            public TestCaseChangeEvent(TestCase row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public TestCase Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ItemValuesDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnValue;
            
            private DataColumn columnQuality;
            
            private DataColumn columnTimestamp;
            
            private DataColumn columnTestCase_Id;
            
            internal ItemValuesDataTable() : 
                    base("TsCHdaItemValue") {
                this.InitClass();
            }
            
            internal ItemValuesDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn ValueColumn {
                get {
                    return this.columnValue;
                }
            }
            
            internal DataColumn QualityColumn {
                get {
                    return this.columnQuality;
                }
            }
            
            internal DataColumn TimestampColumn {
                get {
                    return this.columnTimestamp;
                }
            }
            
            internal DataColumn TestCase_IdColumn {
                get {
                    return this.columnTestCase_Id;
                }
            }
            
            public TsCHdaItemValue this[int index] {
                get {
                    return ((TsCHdaItemValue)(this.Rows[index]));
                }
            }
            
            public event ItemValueChangeEventHandler ItemValueChanged;
            
            public event ItemValueChangeEventHandler ItemValueChanging;
            
            public event ItemValueChangeEventHandler ItemValueDeleted;
            
            public event ItemValueChangeEventHandler ItemValueDeleting;
            
            public void AddItemValue(TsCHdaItemValue row) {
                this.Rows.Add(row);
            }
            
            public TsCHdaItemValue AddItemValue(System.Double Value, int Quality, System.Decimal Timestamp, TestCase parentTestCaseByTestCase_ItemValue) {
                TsCHdaItemValue rowItemValue = ((TsCHdaItemValue)(this.NewRow()));
                rowItemValue.ItemArray = new object[] {
                        Value,
                        Quality,
                        Timestamp,
                        parentTestCaseByTestCase_ItemValue[8]};
                this.Rows.Add(rowItemValue);
                return rowItemValue;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ItemValuesDataTable cln = ((ItemValuesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ItemValuesDataTable();
            }
            
            internal void InitVars() {
                this.columnValue = this.Columns["Value"];
                this.columnQuality = this.Columns["Quality"];
                this.columnTimestamp = this.Columns["Timestamp"];
                this.columnTestCase_Id = this.Columns["TestCase_Id"];
            }
            
            private void InitClass() {
                this.columnValue = new DataColumn("Value", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnValue);
                this.columnQuality = new DataColumn("Quality", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnQuality);
                this.columnTimestamp = new DataColumn("Timestamp", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTimestamp);
                this.columnTestCase_Id = new DataColumn("TestCase_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnTestCase_Id);
            }
            
            public TsCHdaItemValue NewItemValue() {
                return ((TsCHdaItemValue)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new TsCHdaItemValue(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(TsCHdaItemValue);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ItemValueChanged != null)) {
                    this.ItemValueChanged(this, new ItemValueChangeEvent(((TsCHdaItemValue)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ItemValueChanging != null)) {
                    this.ItemValueChanging(this, new ItemValueChangeEvent(((TsCHdaItemValue)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ItemValueDeleted != null)) {
                    this.ItemValueDeleted(this, new ItemValueChangeEvent(((TsCHdaItemValue)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ItemValueDeleting != null)) {
                    this.ItemValueDeleting(this, new ItemValueChangeEvent(((TsCHdaItemValue)(e.Row)), e.Action));
                }
            }
            
            public void RemoveItemValue(TsCHdaItemValue row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TsCHdaItemValue : DataRow {
            
            private ItemValuesDataTable tableItemValues;
            
            internal TsCHdaItemValue(DataRowBuilder rb) : 
                    base(rb) {
                this.tableItemValues = ((ItemValuesDataTable)(this.Table));
            }
            
            public System.Double Value {
                get {
                    try {
                        return ((System.Double)(this[this.tableItemValues.ValueColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableItemValues.ValueColumn] = value;
                }
            }
            
            public int Quality {
                get {
                    if (this.IsQualityNull()) {
                        return 0;
                    }
                    else {
                        return ((int)(this[this.tableItemValues.QualityColumn]));
                    }
                }
                set {
                    this[this.tableItemValues.QualityColumn] = value;
                }
            }
            
            public System.Decimal Timestamp {
                get {
                    if (this.IsTimestampNull()) {
                        return 0m;
                    }
                    else {
                        return ((System.Decimal)(this[this.tableItemValues.TimestampColumn]));
                    }
                }
                set {
                    this[this.tableItemValues.TimestampColumn] = value;
                }
            }
            
            public TestCase TestCase {
                get {
                    return ((TestCase)(this.GetParentRow(this.Table.ParentRelations["TestCase_ItemValue"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["TestCase_ItemValue"]);
                }
            }
            
            public bool IsValueNull() {
                return this.IsNull(this.tableItemValues.ValueColumn);
            }
            
            public void SetValueNull() {
                this[this.tableItemValues.ValueColumn] = System.Convert.DBNull;
            }
            
            public bool IsQualityNull() {
                return this.IsNull(this.tableItemValues.QualityColumn);
            }
            
            public void SetQualityNull() {
                this[this.tableItemValues.QualityColumn] = System.Convert.DBNull;
            }
            
            public bool IsTimestampNull() {
                return this.IsNull(this.tableItemValues.TimestampColumn);
            }
            
            public void SetTimestampNull() {
                this[this.tableItemValues.TimestampColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ItemValueChangeEvent : EventArgs {
            
            private TsCHdaItemValue eventRow;
            
            private DataRowAction eventAction;
            
            public ItemValueChangeEvent(TsCHdaItemValue row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public TsCHdaItemValue Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
